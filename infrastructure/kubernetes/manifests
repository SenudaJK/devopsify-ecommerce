# DevOpsify E-Commerce - Complete Kubernetes Manifests
# Ready-to-deploy manifests for Azure AKS with MongoDB, Node.js backend, and React frontend

---
# Namespace - Organization for all DevOpsify resources
apiVersion: v1
kind: Namespace
metadata:
  name: devopsify
  labels:
    name: devopsify

---
# Frontend Deployment - React Application with Nginx
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devopsify-frontend
  namespace: devopsify
  labels:
    app: devopsify-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: devopsify-frontend
  template:
    metadata:
      labels:
        app: devopsify-frontend
    spec:
      containers:
      - name: frontend
        image: s3nudaj/devopsify-frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: REACT_APP_API_URL
          value: "http://devopsify-backend-service:5001"
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
# Frontend Service - LoadBalancer for public access
apiVersion: v1
kind: Service
metadata:
  name: devopsify-frontend-service
  namespace: devopsify
  labels:
    app: devopsify-frontend
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: devopsify-frontend

---
# Backend Deployment - Node.js API Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devopsify-backend
  namespace: devopsify
  labels:
    app: devopsify-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: devopsify-backend
  template:
    metadata:
      labels:
        app: devopsify-backend
    spec:
      containers:
      - name: backend
        image: s3nudaj/devopsify-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5001
        env:
        - name: MONGODB_URI
          value: "mongodb://devopsify-mongodb-service:27017/devopsify"
        - name: PORT
          value: "5001"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi

---
# Backend Service - Internal ClusterIP
apiVersion: v1
kind: Service
metadata:
  name: devopsify-backend-service
  namespace: devopsify
  labels:
    app: devopsify-backend
spec:
  type: ClusterIP
  ports:
  - port: 5001
    targetPort: 5001
    protocol: TCP
    name: http
  selector:
    app: devopsify-backend

---
# MongoDB Deployment - Database Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devopsify-mongodb
  namespace: devopsify
  labels:
    app: devopsify-mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: devopsify-mongodb
  template:
    metadata:
      labels:
        app: devopsify-mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        ports:
        - containerPort: 27017
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
      volumes:
      - name: mongodb-storage
        emptyDir: {}

---
# MongoDB Service - Internal ClusterIP
apiVersion: v1
kind: Service
metadata:
  name: devopsify-mongodb-service
  namespace: devopsify
  labels:
    app: devopsify-mongodb
spec:
  type: ClusterIP
  ports:
  - port: 27017
    targetPort: 27017
    protocol: TCP
    name: mongodb
  selector:
    app: devopsify-mongodb

---
# ConfigMap for MongoDB initialization (optional)
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init-script
  namespace: devopsify
data:
  init-mongo.js: |
    // Initialize MongoDB with sample data
    db = db.getSiblingDB('devopsify');
    
    // Create collections
    db.createCollection('products');
    db.createCollection('users');
    db.createCollection('orders');
    
    // Insert sample products
    db.products.insertMany([
      {
        name: "Laptop Pro",
        description: "High-performance laptop for professionals",
        price: 1299.99,
        category: "Electronics",
        stock: 50,
        imageUrl: "/images/laptop-pro.jpg",
        createdAt: new Date()
      },
      {
        name: "Wireless Headphones",
        description: "Premium noise-cancelling headphones",
        price: 199.99,
        category: "Electronics",
        stock: 100,
        imageUrl: "/images/headphones.jpg",
        createdAt: new Date()
      },
      {
        name: "Smart Watch",
        description: "Fitness tracking smartwatch",
        price: 299.99,
        category: "Electronics",
        stock: 75,
        imageUrl: "/images/smartwatch.jpg",
        createdAt: new Date()
      }
    ]);
    
    print('MongoDB initialized with sample data');

---
# Horizontal Pod Autoscaler for Backend (optional)
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: devopsify-backend-hpa
  namespace: devopsify
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: devopsify-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80