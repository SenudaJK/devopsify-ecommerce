networks:
  devopsify-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local

services:
  # MongoDB Database with proper configuration
  mongodb:
    image: mongo:6.0
    container_name: devopsify-mongodb
    restart: unless-stopped
    environment:
      # Root admin credentials
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: devopsify_admin_2024
      # Application database
      MONGO_INITDB_DATABASE: devopsify_ecommerce
    ports:
      - "27017:27017"
    volumes:
      # Persistent data storage
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      # Initialization script
      - ./src/database/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - devopsify-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: ["mongod", "--auth", "--bind_ip_all"]

  # Backend API
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: production
    container_name: devopsify-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5001
      # MongoDB connection with authentication
      MONGODB_URI: mongodb://devopsify_user:devopsify_password_2024@mongodb:27017/devopsify_ecommerce?authSource=devopsify_ecommerce
      # JWT configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 7d
      # CORS configuration
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5001:5001"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - devopsify-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Web Application
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
      target: production
    container_name: devopsify-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5001
      REACT_APP_ENV: development
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - devopsify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # MongoDB Admin Interface (Optional - for development)
  mongo-express:
    image: mongo-express:latest
    container_name: devopsify-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: devopsify_admin_2024
      ME_CONFIG_MONGODB_URL: mongodb://admin:devopsify_admin_2024@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - devopsify-network
    profiles:
      - debug  # Only start with: docker-compose --profile debug up